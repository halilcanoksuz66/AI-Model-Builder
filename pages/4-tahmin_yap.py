import streamlit as st
import numpy as np

st.title("ğŸ”® Tahmin Yapma")
# Local Storage'deki verileri Ã§ektik.
if 'model' in st.session_state and 'data' in st.session_state:
    model = st.session_state['model']
    data = st.session_state['data']

    # EÄŸitimde kullanÄ±lan Ã¶zellikler : outcome hariÃ§ hepsini alÄ±p yazdÄ±rÄ±yoruz listeyi. 
    feature_columns = [col for col in data.columns if col != st.session_state['target_column']]
    st.write("Modelin BeklediÄŸi Ã–zellikler:")
    st.write(feature_columns)

    # KullanÄ±cÄ±dan giriÅŸ al ve user_input listesine ekle
    user_input = []
    for feature in feature_columns:
        value = st.text_input(f"{feature} iÃ§in deÄŸer girin:", "")
        user_input.append(value)

    # Tahmin yap butonuna basÄ±ldÄ±ysa
    if st.button("Tahmin Yap"):
        try:
            # Girdileri numpy array'e Ã§evir. reshape(1, -1) ile 2D array'e dÃ¶nÃ¼ÅŸtÃ¼r. 
            # Bunu yapmamÄ±zÄ±n sebebi modelin 2D array beklemesi.
            input_array = np.array(user_input, dtype=float).reshape(1, -1)

            # Tahmin yap ve sonuÃ§larÄ± yazdÄ±r
            # predict ile predict_proba arasÄ±ndaki fark predict_proba olasÄ±lÄ±k dÃ¶ndÃ¼rÃ¼rken predict etiket dÃ¶ndÃ¼rÃ¼r.
            prediction = model.predict(input_array)
            prediction_proba = model.predict_proba(input_array)

            # YalnÄ±zca bir tahmin dizisi gÃ¶nderdiÄŸimiz iÃ§in ilk elemanÄ± alÄ±yoruz.
            st.write("ğŸ“Œ Tahmin Sonucu:")
            st.write(f"- SÄ±nÄ±f: {prediction[0]}")
            st.write(f"- OlasÄ±lÄ±klar: {prediction_proba[0]}")
        except ValueError as e:
            st.error(f"GirdiÄŸiniz deÄŸerlerde hata var: {e}")
else:
    st.warning("LÃ¼tfen Ã¶nce modeli eÄŸitin ve veriyi yÃ¼kleyin!")
